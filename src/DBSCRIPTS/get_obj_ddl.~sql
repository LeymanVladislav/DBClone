declare
  v$owner       varchar2(32) := ?; --'CB';
  v$ObjName     varchar2(128) := ?; --'CUR_RATES_CB';
  v$ObjectTypes varchar2(128) := ?; --'TABLE'; --Для TABLE проверить корректность работы с триггерами и сиквенсами, а также AQ_TABLES
  v$EnableTCT   boolean := case ?
                             when 1 then
                              true
                             else
                              false
                           end; --true; --Включает создание констреинтов для таблиц
  v$EnableIDX   boolean := case ?
                             when 1 then
                              true
                             else
                              false
                           end; --true; --Включает создание индексов для таблиц

  --v$ObjDDL Clob;
  v$ObjDDLst varchar2(4000);
  function GetObjDLL(p$ObjName     in varchar2,
                     p$ObjNameNew  in varchar2 default null,
                     p$ObjectTypes in varchar2, -- TABLE,INDEX,COMMENT,PACKAGE
                     p$EnableTCT   in boolean default false, -- для p$ObjectTypes = TABLE включает констреинты
                     p$EnableIDX   in boolean default false -- для p$ObjectTypes = TABLE включает индексы
                     ) return varchar2 is
  
    v$ObjDDL     varchar2(4000);
    v$ObjDDL_tmp varchar2(4000);
    v_obj$ddls   sys.ku$_ddls;
    v#hdl        pls_integer;
    v#th1        pls_integer;
    v#th2        pls_integer;
    no_inmemory_ex exception;
    pragma exception_init(no_inmemory_ex,
                          -31600);
  
    procedure print_lob(p_clob in clob) is
      v#linesize pls_integer := 4000;
      v$buffer   varchar2(4000);
      v#buffer   pls_integer;
    begin
      v#buffer := dbms_lob.getlength(p_clob);
      for i in 0 .. floor(v#buffer / v#linesize) loop
        v$buffer := dbms_lob.substr(p_clob,
                                    v#linesize,
                                    1 + v#linesize * i);
        dbms_output.put_line(v$buffer);
      end loop;
    end print_lob;
  
  begin
    -- Объявление выгрузки типа TABLE
    v#hdl := sys.dbms_metadata.open(p$ObjectTypes);
  
    if p$ObjectTypes in ('INDEX',
                         'COMMENT') then
      -- Установка фильтра
      sys.dbms_metadata.set_filter(v#hdl,
                                   'BASE_OBJECT_SCHEMA',
                                   v$owner);
      sys.dbms_metadata.set_filter(v#hdl,
                                   'BASE_OBJECT_NAME',
                                   p$ObjName);
    else
      -- Установка фильтра
      sys.dbms_metadata.set_filter(v#hdl,
                                   'SCHEMA',
                                   v$owner);
      sys.dbms_metadata.set_filter(v#hdl,
                                   'NAME',
                                   p$ObjName);
    end if;
  
    if p$ObjectTypes = 'TABLE'
       and p$ObjNameNew is not null then
      -- Объявление трансформации описания таблицы
      v#th1 := sys.dbms_metadata.add_transform(v#hdl,
                                               'MODIFY',
                                               null,
                                               'TABLE');
    
      -- Изменение названия таблицы для трансформации v#th1
      sys.dbms_metadata.set_remap_param(v#th1,
                                        'REMAP_NAME',
                                        p$ObjName,
                                        p$ObjNameNew);
    
      -- если в PART_TUNING задано ТП, то  создаем новую таблицу в нем
      /*sys.dbms_metadata.set_remap_param(v#th1,
      'REMAP_TABLESPACE',
      v$defTableSpaceNameSrc,
      v$tableSpaceNameNew);*/
    
    end if;
  
    -- Добавление еще одной трансформации, для изменения формата выгрузки XML на DDL(Текст)
  
    v#th2 := sys.dbms_metadata.add_transform(v#hdl,
                                             'DDL');
  
    -- Добавление разделителей для трансформации v_th2
    /*sys.dbms_metadata.set_transform_param(v#th2,
                                          'SQLTERMINATOR',
                                          true);*/
  
    if p$ObjectTypes = 'TABLE' then
    
      if p$EnableTCT then
        -- Создание констреинтов отдельной командой для трансформации v#th2                                               
        sys.dbms_metadata.set_transform_param(v#th2,
                                              'CONSTRAINTS_AS_ALTER',
                                              true);
      
        -- Включение констреинтов для трансформации v#th2                                               
        sys.dbms_metadata.set_transform_param(v#th2,
                                              'CONSTRAINTS',
                                              true);
      
        -- Включение внешних ключей для трансформации v#th2                                      
        sys.dbms_metadata.set_transform_param(v#th2,
                                              'REF_CONSTRAINTS',
                                              true);
        -- Создание констреинтов через ALTE v#th2
        sys.dbms_metadata.set_transform_param(v#th2,
                                              'CONSTRAINTS_AS_ALTER',
                                              true);
      else
        -- Включение констреинтов для трансформации v#th2                                               
        sys.dbms_metadata.set_transform_param(v#th2,
                                              'CONSTRAINTS',
                                              false);
      
        -- Включение внешних ключей для трансформации v#th2                                      
        sys.dbms_metadata.set_transform_param(v#th2,
                                              'REF_CONSTRAINTS',
                                              false);
      
      end if;
    
      -- Включение INMEMORY для трансформации v#th2
      begin
        sys.dbms_metadata.set_transform_param(v#th2,
                                              'INMEMORY',
                                              false);
        -- Обработка исключения т.к. не везде есть INMEMORY
      exception
        when no_inmemory_ex then
          null;
      end;
    
    end if;
  
    if p$ObjectTypes in ('TABLE',
                         'INDEX') then
      -- Включение секционирования для трансформации v#th2
      sys.dbms_metadata.set_transform_param(v#th2,
                                            'PARTITIONING',
                                            false);
    
      -- Включение дополнительных атрибутов для трансформации v#th2
      sys.dbms_metadata.set_transform_param(v#th2,
                                            'SEGMENT_ATTRIBUTES',
                                            false);
    end if;
  
    loop
      v_obj$ddls := sys.dbms_metadata.fetch_ddl(v#hdl);
      exit when v_obj$ddls is null;
      for i in 1 .. cardinality(v_obj$ddls) loop
        v$ObjDDL := v$ObjDDL || v_obj$ddls(i).ddlText;
      end loop;
    end loop;
  
    sys.dbms_metadata.close(v#hdl);
  
    return v$ObjDDL;
  exception
    when others then
      sys.dbms_metadata.close(v#hdl);
      raise;
  end;

begin
  v$ObjDDLst := GetObjDLL(p$ObjName     => v$ObjName,
                          p$ObjectTypes => v$ObjectTypes,
                          p$EnableTCT   => v$EnableTCT,
                          p$EnableIDX   => v$EnableIDX);
  ?          := v$ObjDDLst;
end;
